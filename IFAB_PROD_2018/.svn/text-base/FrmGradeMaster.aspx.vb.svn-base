
Partial Class FrmGradeMaster
    Inherits BasePage
    Dim EL As New ELGradeMaster
    Dim BL As New BLGradeMaster
    Dim dt As New DataTable
    'code by Anchala on 03-09-12
    'method for insert and update
    Protected Sub btnAdd_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnAdd.Click
        ddlCourse.Focus()
        If (Session("BranchCode") = Session("ParentBranch")) Then
            EL.CourseName = ddlCourse.SelectedValue
            EL.Min = Txtmin.Text
            EL.Max = Txtmax.Text
            EL.Grade = Txtgrade.Text
            If TxtGradePoint.Text = "" Then
                EL.GradePoint = 0
            Else
                EL.GradePoint = TxtGradePoint.Text
            End If
            If (Txtmax.Text) > 100 Then
                msginfo.Text = ValidationMessage(1043)
                lblmsg.Text = ValidationMessage(1014)
                Exit Sub
            End If
            If CDbl(Txtmax.Text) < CDbl(Txtmin.Text) Then
                msginfo.Text = ValidationMessage(1042)
                lblmsg.Text = ValidationMessage(1014)
                Txtmin.Focus()

                For g As Integer = 0 To 5
                Next
            Else

                If btnAdd.CommandName <> "UPDATE" Then
                    dt = BL.GetMinMax(EL)
                    For Each grid As GridViewRow In GVGradeMaster.Rows

                        Dim a As Double
                        Dim b As Double
                        Dim c As Integer

                        a = CType(grid.FindControl("Lblmin"), Label).Text
                        b = CType(grid.FindControl("Lblmax"), Label).Text
                        c = CType(grid.FindControl("Lblcourse"), Label).Text
                        'If c = EL.CourseName Then
                        'If a <= EL.Min And a >= EL.Max Then
                        '    msginfo.Text = "Data already exists"
                        '    Exit Sub
                        'ElseIf b <= EL.Max And b >= EL.Min Then
                        '    msginfo.Text = "Data already exists"
                        '    Exit Sub
                        'ElseIf b <= EL.Max And b >= EL.Min And a <= EL.Min And a >= EL.Max Then
                        '    msginfo.Text = "Data already exists"
                        '    Exit Sub
                        'ElseIf b >= EL.Max And b <= EL.Min And a >= EL.Min And a >= EL.Max Then
                        '    msginfo.Text = "Data already exists"
                        '    Exit Sub

                        'Else
                        If a <= EL.Min And a >= EL.Max And c = EL.CourseName Then
                            msginfo.Text = ValidationMessage(1030)
                            Exit Sub
                        ElseIf b <= EL.Max And b >= EL.Min And c = EL.CourseName Then
                            msginfo.Text = ValidationMessage(1030)
                            Exit Sub
                        ElseIf b <= EL.Max And b >= EL.Min And c = EL.CourseName And a <= EL.Min And a >= EL.Max Then
                            msginfo.Text = ValidationMessage(1030)
                            Exit Sub
                        ElseIf b >= EL.Max And b <= EL.Min And c = EL.CourseName And a >= EL.Min And a >= EL.Max Then
                            msginfo.Text = ValidationMessage(1030)
                            Exit Sub
                        End If
                        'End If
                    Next
                    EL.id = 0
                    dt = BL.GetDuplicate(EL)
                    If dt.Rows.Count > 0 Then
                        lblmsg.Text = ValidationMessage(1014)
                        msginfo.Text = ValidationMessage(1030)
                        ddlCourse.Focus()
                    Else
                        EL.CourseName = ddlCourse.SelectedValue
                        EL.Min = Txtmin.Text
                        EL.Max = Txtmax.Text
                        EL.Grade = Txtgrade.Text
                        If TxtGradePoint.Text = "" Then
                            EL.GradePoint = 0
                        Else
                            EL.GradePoint = TxtGradePoint.Text
                        End If
                        BL.Insert(EL)
                        btnAdd.CommandName = "ADD"
                        lblmsg.Text = ValidationMessage(1020)
                        ddlCourse.Focus()
                        msginfo.Text = ValidationMessage(1014)
                        ViewState("PageIndex") = 0
                        GVGradeMaster.PageIndex = 0
                        DispGrid()
                        clear()
                    End If
                Else
                    dt = BL.GetMinMax(EL)
                    EL.id = ViewState("id")
                    For Each grid As GridViewRow In GVGradeMaster.Rows
                        Dim a As Double
                        Dim b As Double
                        Dim c As Integer
                        Dim d As Integer
                        a = CType(grid.FindControl("Lblmin"), Label).Text
                        b = CType(grid.FindControl("Lblmax"), Label).Text
                        c = CType(grid.FindControl("Lblcourse"), Label).Text
                        d = CType(grid.FindControl("GID"), HiddenField).Value
                        ViewState("id") = d
                        If d = ViewState("id") Then
                            If a <= EL.Min And a >= EL.Max And c = EL.CourseName And ViewState("id") <> d Then
                                msginfo.Text = ValidationMessage(1030)
                                btnAdd.CommandName = "UPDATE"

                                Exit Sub
                            ElseIf b <= EL.Max And b >= EL.Min And c = EL.CourseName And ViewState("id") <> d Then
                                msginfo.Text = ValidationMessage(1030)
                                btnAdd.CommandName = "UPDATE"
                                Exit Sub
                            ElseIf b <= EL.Max And b >= EL.Min And c = EL.CourseName And a <= EL.Min And a >= EL.Max And ViewState("id") <> d Then
                                msginfo.Text = ValidationMessage(1030)
                                btnAdd.CommandName = "UPDATE"
                                Exit Sub
                            ElseIf b >= EL.Max And b >= EL.Min And c = EL.CourseName And a >= EL.Min And a >= EL.Max And ViewState("id") <> d Then
                                msginfo.Text = ValidationMessage(1030)
                                btnAdd.CommandName = "UPDATE"
                                Exit Sub

                            End If
                        Else

                            If a <= EL.Min And a >= EL.Max And c = EL.CourseName Then
                                msginfo.Text = ValidationMessage(1030)
                                btnAdd.CommandName = "UPDATE"
                                Exit Sub
                            ElseIf b <= EL.Max And b >= EL.Min And c = EL.CourseName Then
                                msginfo.Text = ValidationMessage(1030)
                                btnAdd.CommandName = "UPDATE"
                                Exit Sub

                            ElseIf b <= EL.Max And b >= EL.Min And c = EL.CourseName And a <= EL.Min And a >= EL.Max And c = EL.CourseName Then
                                msginfo.Text = ValidationMessage(1030)
                                btnAdd.CommandName = "UPDATE"
                                Exit Sub

                            ElseIf b >= EL.Max And b >= EL.Min And c = EL.CourseName And a >= EL.Min And a >= EL.Max And c = EL.CourseName Then
                                msginfo.Text = ValidationMessage(1030)
                                btnAdd.CommandName = "UPDATE"
                                Exit Sub


                            End If
                        End If
                    Next

                    EL.id = ViewState("id")
                    dt = BL.GetDuplicate(EL)

                    If dt.Rows.Count > 0 Then
                        lblmsg.Text = ValidationMessage(1014)
                        msginfo.Text = ValidationMessage(1030)
                        ddlCourse.Focus()
                    Else
                        BL.Update(EL)
                        btnAdd.CommandName = "ADD"
                        btnView.CommandName = "VIEW"
                        lblmsg.Text = ValidationMessage(1017)
                        ddlCourse.Focus()
                        clear()
                        btnAdd.CommandName = "ADD"
                        GVGradeMaster.PageIndex = ViewState("PageIndex")
                        DispGrid()
                    End If
                End If
            End If

            'Next
        Else
            msginfo.Text = ValidationMessage(1021)
            lblmsg.Text = ValidationMessage(1014)
        End If

    End Sub
    'code by Anchala on 03-09-12
    '    'method for display
    Sub DispGrid()
        Dim dt As New DataTable
        EL.id = 0
        GVGradeMaster.Enabled = True
        dt = BL.GetData(EL)
        If dt.Rows.Count > 0 Then
            GVGradeMaster.DataSource = dt
            GVGradeMaster.DataBind()
            LinkButton.Focus()
            Multilingual()
        Else
            lblmsg.Text = ValidationMessage(1014)
            msginfo.Text = ValidationMessage(1023)
        End If
    End Sub
    Sub clear()
        Txtmin.Text = ""
        Txtmax.Text = ""
        Txtgrade.Text = ""
        TxtGradePoint.Text = ""
    End Sub

    Protected Sub btnView_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnView.Click
        If btnView.CommandName = "VIEW" Then
            msginfo.Text = ValidationMessage(1014)
            lblmsg.Text = ValidationMessage(1014)
            ViewState("PageIndex") = 0
            GVGradeMaster.PageIndex = 0
            DispGrid()
        ElseIf btnView.CommandName = "BACK" Then
            btnAdd.CommandName = "ADD"
            btnView.CommandName = "VIEW"
            msginfo.Text = ValidationMessage(1014)
            clear()
            GVGradeMaster.PageIndex = ViewState("PageIndex")
            DispGrid()
        End If
    End Sub
    'code by Anchala on 03-09-12
    '    'method for delete
    Protected Sub GVGradeMaster_RowDeleting(ByVal sender As Object, ByVal e As System.Web.UI.WebControls.GridViewDeleteEventArgs) Handles GVGradeMaster.RowDeleting
        If (Session("BranchCode") = Session("ParentBranch")) Then
            EL.id = CType(GVGradeMaster.Rows(e.RowIndex).FindControl("GID"), HiddenField).Value
            BL.ChangeFlag(EL)
            GVGradeMaster.DataBind()
            'lblmsg.Visible = True
            msginfo.Text = ValidationMessage(1014)
            lblmsg.Text = ValidationMessage(1028)
            ddlCourse.Focus()
            clear()
            GVGradeMaster.PageIndex = ViewState("PageIndex")
            DispGrid()
        Else
            msginfo.Text = ValidationMessage(1029)
            lblmsg.Text = ValidationMessage(1014)
        End If

    End Sub

    Protected Sub Page_Load1(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load
        ddlCourse.Focus()
        lblmsg.Text = ValidationMessage(1014)
        msginfo.Text = ValidationMessage(1014)
        Dim heading As String
        heading = Session("RptFrmTitleName")
        Me.Lblheading.Text = heading
        If Not IsPostBack Then
            Control_Text_Multilingual()
        End If
    End Sub
    'code by Anchala on 03-09-12
    'method for edit
    Protected Sub GVGradeMaster_RowEditing(ByVal sender As Object, ByVal e As System.Web.UI.WebControls.GridViewEditEventArgs) Handles GVGradeMaster.RowEditing
        ddlCourse.Focus()
        'If (Session("BranchCode") = Session("ParentBranch")) Then
        Dim dt As New DataTable
        btnAdd.CommandName = "UPDATE"
        btnView.Visible = True
        btnView.CommandName = "BACK"
        lblmsg.Text = ValidationMessage(1014)
        msginfo.Text = ValidationMessage(1014)
        GVGradeMaster.Visible = True
        ViewState("id") = CType(GVGradeMaster.Rows(e.NewEditIndex).FindControl("GID"), HiddenField).Value
        ddlCourse.SelectedValue = CType(GVGradeMaster.Rows(e.NewEditIndex).FindControl("Lblcourse"), Label).Text
        Txtmin.Text = CType(GVGradeMaster.Rows(e.NewEditIndex).FindControl("Lblmin"), Label).Text
        Txtmax.Text = CType(GVGradeMaster.Rows(e.NewEditIndex).FindControl("Lblmax"), Label).Text
        Txtgrade.Text = CType(GVGradeMaster.Rows(e.NewEditIndex).FindControl("Lblgrade"), Label).Text
        TxtGradePoint.Text = CType(GVGradeMaster.Rows(e.NewEditIndex).FindControl("LblGradePoint"), Label).Text
        EL.id = ViewState("id")
        dt = BL.GetData(EL)
        GVGradeMaster.DataSource = dt
        GVGradeMaster.DataBind()
        GVGradeMaster.Enabled = False
        Multilingual()
    End Sub
    <System.Web.Services.WebMethod()> Public Sub AbandonSession()
        Dim i As Int16 = UserDetailsDB.UpdateUserlog()
        Response.Redirect("LogIn.aspx")
    End Sub

    Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load

    End Sub

    Protected Sub GVGradeMaster_Sorting(ByVal sender As Object, ByVal e As System.Web.UI.WebControls.GridViewSortEventArgs) Handles GVGradeMaster.Sorting
        Dim sortingDirection As String = String.Empty
        If dir() = SortDirection.Ascending Then
            dir = SortDirection.Descending
            sortingDirection = "Desc"
        Else
            dir = SortDirection.Ascending
            sortingDirection = "Asc"
        End If
        Dim dt As New DataTable
        EL.id = 0
        GVGradeMaster.Enabled = True
        dt = BL.GetData(EL)
        Dim sortedView As New DataView(dt)
        sortedView.Sort = Convert.ToString(e.SortExpression) & " " & sortingDirection
        GVGradeMaster.DataSource = sortedView
        GVGradeMaster.DataBind()
        LinkButton.Focus()
        Multilingual()
    End Sub
    Public Property dir() As SortDirection
        Get
            If ViewState("dirState") Is Nothing Then
                ViewState("dirState") = SortDirection.Descending
            End If
            Return DirectCast(ViewState("dirState"), SortDirection)
        End Get
        Set(ByVal value As SortDirection)
            ViewState("dirState") = value
        End Set
    End Property
    ''Code Written for Multilingual By Ajit Kumar Singh on 12th Aug
    ''Retriving the text of controls based on Language
    Sub Multilingual()
        Dim j As Integer
        Dim k As Integer
        Dim dtl As DataTable
        dtl = Session("Control_Text")
        Dim i As Integer = dtl.Rows.Count
        While (i <> 0)
            If dtl.Rows(i - 1).Item("ControlType") = "Label" Then
                Dim myLabel As Label = CType(Me.UpdatePanel1.FindControl(dtl.Rows(i - 1).Item("ControlId")), Label)
                myLabel.Text = dtl.Rows(i - 1).Item("Default_Text")
                i = i - 1
            ElseIf dtl.Rows(i - 1).Item("ControlType") = "Button" Then
                If dtl.Rows(i - 1).Item("ControlCommandName") = btnAdd.CommandName Then
                    Dim myButton As Button = CType(Me.UpdatePanel1.FindControl(dtl.Rows(i - 1).Item("ControlId")), Button)
                    myButton.Text = dtl.Rows(i - 1).Item("Default_Text")
                    i = i - 1
                ElseIf dtl.Rows(i - 1).Item("ControlCommandName") = btnView.CommandName Then
                    Dim myButton As Button = CType(Me.UpdatePanel1.FindControl(dtl.Rows(i - 1).Item("ControlId")), Button)
                    myButton.Text = dtl.Rows(i - 1).Item("Default_Text")
                    i = i - 1
                Else
                    i = i - 1
                End If

            ElseIf dtl.Rows(i - 1).Item("ControlType") = "GridLabel" Then
                j = GVGradeMaster.Columns.Count
                While (j <> 0)
                    If GVGradeMaster.Columns(j - 1).HeaderText = dtl.Rows(i - 1).Item("ControlCommandName") Then
                        GVGradeMaster.Columns(j - 1).HeaderText = dtl.Rows(i - 1).Item("Default_Text")
                    End If
                    j = j - 1
                End While
                i = i - 1
            ElseIf dtl.Rows(i - 1).Item("ControlType") = "GridButton" Then
                k = GVGradeMaster.Rows.Count
                If dtl.Rows(i - 1).Item("ControlCommandName") = "Acknowledge" Then
                    While (k <> 0)
                        Dim lnkCanc As LinkButton = CType(GVGradeMaster.Rows(k - 1).FindControl(dtl.Rows(i - 1).Item("ControlId")), LinkButton)
                        lnkCanc.Text = dtl.Rows(i - 1).Item("Default_Text")
                        k = k - 1
                    End While
                ElseIf dtl.Rows(i - 1).Item("ControlCommandName") = "Edit" Then
                    k = GVGradeMaster.Rows.Count
                    While (k <> 0)
                        Dim lnkCanc As LinkButton = CType(GVGradeMaster.Rows(k - 1).FindControl(dtl.Rows(i - 1).Item("ControlId")), LinkButton)
                        lnkCanc.Text = dtl.Rows(i - 1).Item("Default_Text")
                        k = k - 1
                    End While
                ElseIf dtl.Rows(i - 1).Item("ControlCommandName") = "Delete" Then
                    k = GVGradeMaster.Rows.Count
                    While (k <> 0)
                        Dim lnkCanc As LinkButton = CType(GVGradeMaster.Rows(k - 1).FindControl(dtl.Rows(i - 1).Item("ControlId")), LinkButton)
                        lnkCanc.Text = dtl.Rows(i - 1).Item("Default_Text")
                        k = k - 1
                    End While
                End If
                i = i - 1
            ElseIf dtl.Rows(i - 1).Item("ControlType") = "CheckBox" Then
                Dim myCheckbox As CheckBox = CType(Me.UpdatePanel1.FindControl(dtl.Rows(i - 1).Item("ControlId")), CheckBox)
                myCheckbox.Text = dtl.Rows(i - 1).Item("Default_Text")
                i = i - 1
            ElseIf dtl.Rows(i - 1).Item("ControlType") = "RadioButtonList" Then
                Dim myRadiobutton As RadioButtonList = CType(Me.UpdatePanel1.FindControl(dtl.Rows(i - 1).Item("ControlId")), RadioButtonList)
                Dim a As Integer = myRadiobutton.Items.Count
                While (a <> 0)
                    For Each li As ListItem In myRadiobutton.Items
                        If li.Value = dtl.Rows(i - 1).Item("ControlCommandName") Then
                            li.Text = dtl.Rows(i - 1).Item("Default_Text")
                        End If
                    Next
                    a = a - 1
                End While
                i = i - 1
            End If
        End While
    End Sub
    Public Sub Control_Text_Multilingual()
        Dim dtll As DataTable
        Dim FormName As String = Session("Code")
        Dim LanguageID As Integer
        If Session("LanguageID") = "" Then
            LanguageID = 0
        Else
            LanguageID = Session("LanguageID")
        End If
        If LanguageID <> 0 Then
            dtll = GlobalFunction.GetChangeLanguage(FormName, LanguageID)
            Session("Control_Text") = dtll
            Multilingual()
        End If
    End Sub
    Public Function ValidationMessage(ByVal ErrorCode As Integer) As String
        Dim dt2 As DataTable
        dt2 = Session("ValidationTable")
        Dim X As Integer = dt2.Rows.Count() - 1
        Dim str As String = " "
        For i As Integer = 0 To X
            If (dt2.Rows(i).Item("MessageCode").ToString() = ErrorCode) Then
                Return dt2.Rows(i).Item("MessageText").ToString()
            End If
        Next
        Return 0
    End Function
End Class
